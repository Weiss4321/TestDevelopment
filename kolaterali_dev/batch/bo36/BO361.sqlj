package hr.vestigo.modules.collateral.batch.bo36;

import java.sql.*;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.framework.remote.transaction.ConnCtx;
import hr.vestigo.modules.coreapp.common.yxyB.YXYB0;
import hr.vestigo.modules.coreapp.common.yxyD.YXYD0;
import hr.vestigo.modules.collateral.common.yoy0.YOY00;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Vector;


public class BO361
{
    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo36/BO361.sqlj,v 1.6 2014/04/11 08:14:00 hraskd Exp $";
    
    private BatchContext batchContext;
    private ConnCtx connCtx;
    
    #sql iterator ColProcIterator with (holdability = true) (BigDecimal col_pro_id, String proc_status);
    #sql iterator InsurancePoliciesIterator with (holdability = true) 
    	(BigDecimal col_hea_id,
    	String col_num,
    	BigDecimal col_ins_id,
    	String ip_code,
    	Date ip_valid_from,
    	Date ip_valid_until,
    	Date ip_paid_from,
    	Date ip_paid_until,
    	String ip_status,
    	String int_pol_type_name);
    

    public BO361(BatchContext batchContext)
    {
        this.batchContext = batchContext;
        try {
            this.connCtx = batchContext.getContext();
        }
        catch (SQLException e) {
            batchContext.debug("Nema connCtx u podtransakciji!");
        }
    }
	
	public BigDecimal insertIntoEvent()
	{
        try
        {
        	BigDecimal eve_id = null;
        	YXYB0 eve1 = new YXYB0(batchContext);
        	YXYD0 genId = new YXYD0(connCtx);

        	batchContext.beginTransaction();
        	eve_id = genId.getNewId();

        	HashMap event = new HashMap();
        	event.put("eve_id", eve_id);
        	event.put("eve_typ_id", new BigDecimal("2772699003"));
        	event.put("event_date", new java.sql.Date(System.currentTimeMillis()));
        	event.put("cmnt", "Promjena statusa po policama životnog osiguranja (POK)");
        	event.put("use_id", batchContext.getUserID());
        	event.put("ext_event_code", null);
        	event.put("ext_event_num", null);
        	event.put("bank_sign", batchContext.getBankSign());
        	batchContext.debug("eve_id" + event.get("eve_id"));

        	eve1.insertEvent(event);
        	batchContext.commitTransaction();
        	batchContext.updateEveID(eve_id);
        	return eve_id;
        }
        catch(Exception ex)
        {
            batchContext.error("Greska pri insertiranju u event tablicu!", ex);
            return null;
        }
    }

	
	/**
	 * Metoda koja provjerava da li u tabeli COL_PROC za ovu vrstu obrade i current date postoji slog.
	 * @return Vektor s atributima col_pro_id i proc_status ukoliko je metoda uspješno završila, inaèe null.
	 */
	public Vector selectColProId()
	{
		Vector vect = new Vector();
		ColProcIterator iter = null;
		try
		{
			#sql [connCtx] iter = {
				SELECT col_pro_id, proc_status 
				FROM col_proc 
				WHERE proc_type = 'POK' AND value_date = current date
			};
			if(iter.next())
			{
				vect.add(iter.col_pro_id());
				vect.add(iter.proc_status());
			}
			else
			{
				vect.add(null);
				vect.add(null);
			}
		}
		catch(SQLException ex)
		{
			batchContext.error("Greska kod provjere da li je obrada vec pustena za danasnji datum!", ex);
			return null;
		}
		return vect;
	}

	
	/** 
	 * Metoda koja evidentira poèetak izvoðenja obrade ubacujuæi novi zapis u tablicu COL_PROC.
	 * @return Primarni kljuè zapisa iz tablice COL_PROC
	 */
	public BigDecimal insertIntoColProc()
	{
		BigDecimal col_pro_id = null;
		try
		{
			YOY00 yoy00 = new YOY00(connCtx);
			col_pro_id = yoy00.getNewId();

			batchContext.beginTransaction();
			#sql [connCtx] {
				INSERT INTO col_proc (
					col_pro_id,
					proc_date,
					value_date,
					proc_type,
					proc_way,
					proc_status,
					col_number,
					org_uni_id,
					use_id,
					user_lock )
				VALUES (
					:col_pro_id,
					current date,
					current date,
					'POK',
					'A',
					'0',
					0,
					53253,
					1,
					current timestamp )
			};
			batchContext.commitTransaction();
		}
		catch(Exception ex)
		{
			batchContext.error("Greska kod ubacivanja zapisa u tablicu COL_PROC!", ex);
			return null;
		}
		return col_pro_id;
	}

	
	/**
     * Metoda koja dohvaæa broj dana koji mora proæi od datuma isteka police osiguranja da bi mogla biti deaktivirana. 
     * @return broj dana
     */
    public int selectDeactivationDelay() throws SQLException
    {
        try
        {
            String delay_str;
            #sql [connCtx] {
                SELECT sys_code_value
                INTO :(delay_str)
                FROM system_code_value
                WHERE sys_cod_id = 'ip_deact_delay'
                FETCH FIRST ROW ONLY
            };
            int delay = Integer.parseInt(delay_str);
            batchContext.info("Odgoda deaktivacije = " + delay + " dana");
            return delay;
        }
        catch(SQLException ex)
        {
            batchContext.error("Greska kod dohvata parametra odgode deaktivacije polica osiguranja!", ex);
            throw ex;
        }
    }

	
	/**
	 * Metoda koja dohvaæa skup podataka koji ulaze u obradu.
	 * U obradu ulaze svi kolaterali koju su vrste 7POK - Polica životnog osiguranja-ostali plasmani, i kojima je datum do kada je plaæena premija manji od current date.
	 * Ako je obrada veæ puštana, iskljuèuju se one police osiguranja obraðene prethodnim puštanjem.
	 * @param obradaVecPustana Oznaka da li je obrada veæ puštana prije ali nije završila do kraja (1) ili je ovo prvi put da se pušta (0)
	 * @param col_pro_id ID obrade
	 * @param broj dana koji mora proæi od istekla police osiguranja da bi mogla biti deaktivirana
	 * @return Iterator. Ako je došlo do greške, vaæa null.
	 */
	public InsurancePoliciesIterator selectInsurancePolicies(int obradaVecPustana, BigDecimal col_pro_id, int delay)
	{
		InsurancePoliciesIterator iter = null;
	  // rtc 12442 - Potrebno je policama koje su u statusu "Storno" ukinuti raèunanje dodatnih 30 dana aktivnosti 
		try
		{
			#sql [connCtx] iter = {
				SELECT
					a.col_hea_id 		AS col_hea_id,
					a.col_num 			AS col_num,
					b.col_ins_id 		AS col_ins_id,
					b.ip_code 			AS ip_code,
					b.ip_valid_from 	AS ip_valid_from,
					b.ip_valid_until 	AS ip_valid_until,
					b.ip_paid_from 		AS ip_paid_from,
					b.ip_paid_until 	AS ip_paid_until,
					b.ip_status 		AS ip_status,
					c.int_pol_type_name AS int_pol_type_name
				FROM
					coll_head a,
					coll_inspolicy b,
					insu_policy_type c
				WHERE 
					a.col_cat_id = 616223 AND
					a.col_hea_id = b.col_hea_id AND
					b.ip_status = 'A' AND
                    ( ((b.ip_spec_stat = 'S') AND (b.ip_paid_until < CURRENT DATE))  OR 
                      ((b.ip_spec_stat <> 'S') AND (b.ip_paid_until < CURRENT DATE - :(delay) DAYS ) )
                    ) AND  
					b.ip_type_id = c.int_pol_type_id AND
					( (:obradaVecPustana=0) OR
				  	  (:obradaVecPustana=1 AND a.col_hea_id NOT IN (SELECT c.input_id FROM in_data_dwh_item c WHERE c.col_pro_id = :(col_pro_id)))
					)
				WITH UR
			};
		}
		catch(SQLException ex)
		{
			batchContext.error("Greska kod dohvacanja polica osiguranja!", ex);
		}
		return iter;
	}

	
	/**
	 * Metoda koja oznaèava zadanu policu životnog osiguranja kao isteklu. 
	 * @param col_ins_id ID police osiguranja
	 * @return Da li je metoda uspješno završila
	 */
	public boolean updatePolicyStatus(BigDecimal col_ins_id)
	{
		try
		{
			#sql [connCtx] {
				UPDATE coll_inspolicy
				SET ip_status = 'I'
				WHERE col_ins_id = :(col_ins_id)
			};
		}
		catch(SQLException ex)
		{
			batchContext.error("Greska kod promjene statusa police osiguranja!", ex);
			return false;
		}
		return true;
	}

	
	/**
	 * Metoda koja ubacuje zapis o obradi odreðene police osiguranja u tablicu IN_DATA_DWH_ITEM.
	 * @param col_pro_id ID obrade
	 * @param string_promjene opis promjene
	 * @param col_hea_id ID kolaterala
	 * @return Da li je metoda uspješno završila
	 */
	public boolean insertIntoInDataDwhItem(BigDecimal col_pro_id, String string_promjene, BigDecimal col_hea_id)
	{
		try
		{
			#sql [connCtx] {
				INSERT INTO in_data_dwh_item (
					col_pro_id,
					input_id,
					input_code,
					status,
					output_id )
				VALUES (
					:col_pro_id,
					:col_hea_id,
					:string_promjene,
					'0',
					:col_hea_id )
			};
		}
		catch(SQLException ex)
		{
			batchContext.error("Greska kod ubacivanja zapisa u tablicu IN_DATA_DWH_ITEM!", ex);
			return false;
		}
		return true;
	}

	
	/**
	 * Metoda koja u tablicu COL_PROC zapisuje broj obraðenih slogova u obradi. 
	 * @param col_pro_id ID obrade
	 * @return Da li je metoda uspješno završila
	 */	
	public boolean updateColProc(BigDecimal col_pro_id)
	{
		try
		{
			batchContext.beginTransaction();
			#sql [connCtx] {
				UPDATE col_proc
				SET	col_number = (SELECT COUNT(*) FROM in_data_dwh_item WHERE col_pro_id =:(col_pro_id)),
					proc_ts = current timestamp,
					proc_status = '1'
				WHERE col_pro_id = :(col_pro_id)
			};
			batchContext.commitTransaction();
		}
		catch(SQLException ex)
		{
			batchContext.error("Greska kod spremanja broja obraðenih slogova u tablicu COL_PROC!", ex);
			return false;
		}
		return true;
	}
}