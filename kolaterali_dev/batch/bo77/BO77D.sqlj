package hr.vestigo.modules.collateral.batch.bo77;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.modules.collateral.common.yoyM.GcmTypeData;
import hr.vestigo.modules.collateral.common.yoyM.YOYM0;
import hr.vestigo.modules.rba.util.DateUtils;
import hr.vestigo.modules.rba.util.ExcelUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;

import sqlj.runtime.ref.*;

/**
 * Klasa za kreiranje izvještaja 3.3 Coll Expiry Date
 * @author hradnp
 */
public class BO77D 
{
    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo77/BO77D.sqlj,v 1.2 2013/09/11 13:21:31 hrakis Exp $";

    private BatchContext bc;
    private Date value_date;

    private YOYM0 mapping_3_3;
    private YOYM0 mapping_gctc;

    private Workbook workbook;
    private ExcelStyleData styles;
    private Sheet[] sheet = new Sheet[4];
    private int[] rowIndex = new int[4];
    
    /**
     * Konstruktor klase.
     * @param batchContext Kontekst u kojem se izvršava obrada
     * @param value_date Datum valute (datum za koji se radi izvještaj)
     */
    public BO77D(BatchContext batchContext, Date value_date) throws Exception
    {
        this.bc = batchContext;
        this.value_date = value_date;

        // mapiranja
        this.mapping_3_3 = new YOYM0(bc, "3.3", value_date);    // kolaterali koji ulaze u izvještaj 3.3
        this.mapping_gctc = new YOYM0(bc, "gctc", value_date);  // GCTC kodovi

        // kreiraj workbook
        this.workbook = new SXSSFWorkbook(100);
        this.styles = ExcelStyleData.createStyles(workbook);

        // stvaranje sheet-ova sa naslovom i zaglavljem tablice
        createSheets();
    }

    
    /**
     * Metoda kreira 3 sheeta s nazivima.
     */
    public void createSheets()
    {
        // kreiraj sheet-ove
        int[] columnWidths = new int[] { 81, 275, 111, 147, 147, 200, 201, 144, 114, 114, 114, 193, 193, 150};
        
        this.sheet[0] = workbook.createSheet("Already expired");
        ExcelUtils.setColumnWidths(sheet[0], columnWidths);
        createHeading(this.sheet[0], "Already expired");
        rowIndex[0] = 4;

        this.sheet[1] = workbook.createSheet("Expiry in one month");
        ExcelUtils.setColumnWidths(sheet[1], columnWidths);
        createHeading(this.sheet[1], "Expiry in one month");
        rowIndex[1] = 4;

        this.sheet[2] = workbook.createSheet("Expiry in more than 30 days");
        ExcelUtils.setColumnWidths(sheet[2], columnWidths);
        createHeading(this.sheet[2], "Expiry in more than 30 days");
        rowIndex[2] = 4;
    }

    /**
     * Metoda stvara naslov lista kao i zaglavlje tablice.
     * @param sheet list datoteke u koji je potrebno upisati naslov
     * @param title header sheeta
     */
    public void createHeading(Sheet sheet, String title)
    {
        // kreiranje naslova
        Row row = sheet.createRow(0);
        ExcelUtils.createCell(row, 0, "3.3", styles.titleStyle);
        ExcelUtils.createCell(row, 1, "Coll expiry date", styles.titleStyle);

        row = sheet.createRow(1);
        ExcelUtils.createCell(row, 1, title, styles.normalStyle);

        // stvaranje headera
        row = sheet.createRow(3);
        row.setHeightInPoints(39);
        ExcelUtils.createCell(row, 0, "Customer ID", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 1, "Customer Name", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 2, "Customer Rating", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 3, "Contract ID", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 4, "Contract Expiry date", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 5, "Collateral ID", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 6, "Collateral type", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 7, "Collateral Expiry date", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 8, "WCOV", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 9, "WCV", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 10, "Current LTV", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 11, "Erliest expiry of secured deals", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 12, "Latest expiry of secured deals", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 13, "Relationship manager", styles.normalAllBordersStyle);
    }
    
    /**
     * Metoda koja provjerava ulazi li zadani kolateral u izvještaj, dohvaæa dodatne podatke za taj kolateral i 
     * stvara redak u izlaznoj datoteci za njega (ako on u isti ulazi).
     * @param collateral Objekt s podacima o kolateralu
     * @param date Datum za koji vrijede dani podaci
     */
    public void processCollateral(CollateralData collateral, Date date) throws Exception
    {
        // ako datum nije jednak datumu valute, preskoèi ovaj kolateral
        if (date.compareTo(value_date) != 0) return;

        // provjeri da li kolateral ulazi u izvještaj 3.3
        if (mapping_3_3.resolve(collateral.col_cat_id, collateral.col_typ_id, collateral.col_sub_id) == null)
        {
            bc.debug("...Kolateral ne ulazi u izvjestaj 3.3.");
            return;
        }

        // provjera je li popunjen datum isteka kolaterala
        if (collateral.coll_exp_date == null)
        {
            bc.debug("...Nema datuma isteka kolaterala. Kolateral ne ulazi u izvjestaj 3.3.");
            return;
        }

        // dohvat GCTC koda preko mapiranja
        GcmTypeData type = mapping_gctc.resolve(collateral.col_cat_id, collateral.col_typ_id, collateral.col_sub_id);
        if (type == null)
        {
            bc.warning("...Greska u parametrizaciji - nije definiran GCTC kod. Kolateral ne ulazi u izvjestaj 3.3.");
            return;
        }
        collateral.colateral_type = type.name;
        
        // provjera na koji sheet je potrebno upisati kolateral
        int sheetIndex;
        if (collateral.coll_exp_date.after(value_date))
        {
            Date thirty = addDays(value_date, 30);
            
            if(collateral.coll_exp_date.after(thirty)) sheetIndex = 2;          // ako istièe za više od mjesec dana
            else sheetIndex = 1;                                                // ako istièe unutar iduæih mjesec dana
        }
        else sheetIndex = 0;                                                    // coll_exp_date je veæ istekao

        // upisivanje podatka u izvještaj 3.3 u sheet odreðen istekom coll_exp_date
        Row row = sheet[sheetIndex].createRow(rowIndex[sheetIndex]);
        writeRow(collateral, row);
        rowIndex[sheetIndex]++;
        
        bc.debug("...Kolateral zapisan u izvjestaj 3.3.");
    }
    
    /**
     * Metoda koja podatke iz objekta sprema u proslijeðeni red
     * @param collateral objekt sa podacima koje je potrebno upisati u izvještaj
     * @param row red u koji je potrebno zapisati podatke
     */
    public void writeRow(CollateralData collateral, Row row)
    {
        ExcelUtils.createCell(row, 0, collateral.placement_owner_register_no, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 1, collateral.placement_owner_name, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 2, collateral.placement_owner_rating, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 3, collateral.contract_acc_no, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 4, collateral.placement_due_date, styles.normalDateAllBordersStyle);
        ExcelUtils.createCell(row, 5, collateral.col_num, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 6, collateral.colateral_type, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 7, collateral.coll_exp_date, styles.normalDateAllBordersStyle);
        ExcelUtils.createCell(row, 8, collateral.wcov, styles.normalNumericAllBordersStyle);
        ExcelUtils.createCell(row, 9, collateral.wcv, styles.normalNumericAllBordersStyle);
        ExcelUtils.createCell(row, 10, collateral.ltv, styles.normalNumericAllBordersStyle);
        ExcelUtils.createCell(row, 11, collateral.earliest_exp_date, styles.normalDateAllBordersStyle);
        ExcelUtils.createCell(row, 12, collateral.latest_exp_date, styles.normalDateAllBordersStyle);
        ExcelUtils.createCell(row, 13, collateral.relationship_manag_name, styles.normalAllBordersStyle);
    }


    /**
     * Metoda koja sprema kreirani izvještaj.
     */
    public void createReport() throws Exception{

        // spremi izvještaj
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd");
        String fileName = bc.getOutDir() + "/" + "Coll_Expiry_Date" + "_" + dateFormat.format(value_date) + ".xlsx";
        FileOutputStream fileOut = new FileOutputStream(fileName);
        workbook.write(fileOut);
        fileOut.close();
        dispose();

        // kreiraj marker datoteku
        new File(fileName + ".marker").createNewFile();
        
        bc.info("Uspjesno kreiran izvjestaj 3.3.");
    }
    
    /**
     * Metoda koja uveæava zadani datum za odreðeni broj dana.
     * @param date Datum
     * @param days Broj dana
     * @return uveæani datum
     */
    private Date addDays(Date date, int days)
    {
        if (date == null) return date;
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_MONTH, days);
        Date retDate = new Date(calendar.getTimeInMillis());
        Date maxDate = Date.valueOf("9999-12-31");
        if (retDate.compareTo(maxDate) >= 0) return maxDate;
        else return retDate;
    }
    
    /**
     * Metoda koja briše privremene datoteke koje se stvaraju za vrijeme kreiranja izvještaja.
     */
    public void dispose()
    {
        if (workbook instanceof SXSSFWorkbook) ((SXSSFWorkbook)workbook).dispose();
    }
}