package hr.vestigo.modules.collateral.batch.bo77;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.modules.collateral.common.yoyM.GcmTypeData;
import hr.vestigo.modules.collateral.common.yoyM.YOYM0;
import hr.vestigo.modules.rba.util.ExcelUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.*;
import java.text.SimpleDateFormat;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;

import sqlj.runtime.ref.*;

/**
 * Klasa za kreiranje izvještaja 3.5 Insurance coverage
 * @author hradnp
 */
public class BO77E {

    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo77/BO77E.sqlj,v 1.3 2013/10/11 12:54:10 hradnp Exp $";

    private BatchContext bc;
    private Date value_date;

    private YOYM0 mapping_3_5;
    private YOYM0 mapping_gctc;

    private Workbook workbook;
    private ExcelStyleData styles;
    private Sheet sheet;
    private int rowIndex;
    
    /**
     * Konstruktor klase.
     * @param batchContext Kontekst u kojem se izvršava obrada
     * @param value_date Datum valute (datum za koji se radi izvještaj)
     */
    public BO77E(BatchContext batchContext, Date value_date) throws Exception
    {
        this.bc = batchContext;
        this.value_date = value_date;

        // mapiranja
        this.mapping_3_5 = new YOYM0(bc, "3.5", value_date);    // kolaterali koji ulaze u izvještaj 3.5
        this.mapping_gctc = new YOYM0(bc, "gctc", value_date);  // GCTC kodovi

        // kreiraj workbook
        this.workbook = new SXSSFWorkbook(100);
        this.styles = ExcelStyleData.createStyles(workbook);

        // kreiraj sheet
        this.sheet = workbook.createSheet("Insurance coverage");
        ExcelUtils.setColumnWidths(sheet, new int[] { 81, 298, 147, 147, 136, 136, 146, 103, 91, 200});

        // kreiraj naslov izvještaja
        Row row = sheet.createRow(rowIndex);
        ExcelUtils.createCell(row, 0, "3.5", styles.titleStyle);
        ExcelUtils.createCell(row, 1, "Insurance coverage", styles.titleStyle);
        rowIndex += 3;

        // kreiraj header izvještaja
        row = sheet.createRow(rowIndex);
        row.setHeightInPoints(39);
        ExcelUtils.createCell(row, 0, "Customer ID", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 1, "Customer Name", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 2, "Collateral ID", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 3, "Collateral type", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 4, "Insurance sum", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 5, "WCV", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 6, "Insurance expiry date", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 7, "Premium paid", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 8, "Eligibility", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 9, "Relationship manager", styles.normalAllBordersStyle);
        rowIndex++;
    }
    
    /**
     * Metoda koja provjerava ulazi li zadani kolateral u izvještaj, dohvaæa dodatne podatke za taj kolateral i 
     * stvara redak u izlaznoj datoteci za njega (ako on u isti ulazi).
     * @param collateral Objekt s podacima o kolateralu
     * @param date Datum za koji vrijede dani podaci
     */
    public void processCollateral(CollateralData collateral, Date date)
    {
        // ako datum nije jednak datumu valute, preskoèi ovaj kolateral
        if (date.compareTo(value_date) != 0) return;

        // provjeri da li kolateral ulazi u izvještaj 3.5
        if (mapping_3_5.resolve(collateral.col_cat_id, collateral.col_typ_id, collateral.col_sub_id) == null)
        {
            bc.debug("...Kolateral ne ulazi u izvjestaj 3.5.");
            return;
        }

        // dohvat Collateral type iz mapiranja
        GcmTypeData type = mapping_gctc.resolve(collateral.col_cat_id, collateral.col_typ_id, collateral.col_sub_id);
        if (type == null)
        {
            bc.warning("...Greska u parametrizaciji - nije definiran GCTC kod. Kolateral ne ulazi u izvjestaj 3.5.");
            return;
        }
        collateral.colateral_type = type.name;

        // upisivanje podatka u izvještaj 3.5
        Row row = sheet.createRow(rowIndex);
        ExcelUtils.createCell(row, 0, collateral.placement_owner_register_no, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 1, collateral.placement_owner_name, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 2, collateral.col_num, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 3, collateral.colateral_type, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 4, collateral.insurance_sum, styles.normalNumericAllBordersStyle);
        ExcelUtils.createCell(row, 5, collateral.wcv, styles.normalNumericAllBordersStyle);
        ExcelUtils.createCell(row, 6, collateral.insurance_exp_date, styles.normalDateAllBordersStyle);
        ExcelUtils.createCell(row, 7, collateral.premium_paid, styles.normalCenterAllBordersStyle);
        ExcelUtils.createCell(row, 8, collateral.b2_irb_eligibility, styles.normalCenterAllBordersStyle);
        ExcelUtils.createCell(row, 9, collateral.relationship_manag_name, styles.normalDateAllBordersStyle);
        rowIndex++;
        bc.debug("...Kolateral zapisan u izvjestaj 3.5.");
    }

    
    /**
     * Metoda koja sprema kreirani izvještaj. 
     */
    public void createReport() throws Exception
    {
        // spremi izvještaj
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd");
        String fileName = bc.getOutDir() + "/" + "Insurance_Coverage" + "_" + dateFormat.format(value_date) + ".xlsx";
        FileOutputStream fileOut = new FileOutputStream(fileName);
        workbook.write(fileOut);
        fileOut.close();
        dispose();

        // kreiraj marker datoteku
        new File(fileName + ".marker").createNewFile();
        
        bc.info("Uspjesno kreiran izvjestaj 3.5.");
    }

    
    /**
     * Metoda koja briše privremene datoteke koje se stvaraju za vrijeme kreiranja izvještaja.
     */
    public void dispose()
    {
        if (workbook instanceof SXSSFWorkbook) ((SXSSFWorkbook)workbook).dispose();
    }
}