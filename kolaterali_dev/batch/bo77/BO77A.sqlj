package hr.vestigo.modules.collateral.batch.bo77;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.modules.collateral.common.yoyM.GcmTypeData;
import hr.vestigo.modules.collateral.common.yoyM.YOYM0;
import hr.vestigo.modules.rba.util.DateUtils;
import hr.vestigo.modules.rba.util.ExcelUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;


/**
 * Klasa za kreiranje izvještaja 2.4 Overdue Revaluation Financial Collateral
 * @author hradnp
 */
public class BO77A
{
    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo77/BO77A.sqlj,v 1.3 2013/09/11 13:21:32 hrakis Exp $";

    private BatchContext bc;
    private Date value_date;

    private YOYM0 mapping_2_4;
    private YOYM0 mapping_gctc;

    private Workbook workbook;
    private ExcelStyleData styles;
    private Sheet[] sheet = new Sheet[2];
    private int[] rowIndex = new int[2];


    /**
     * Konstruktor klase.
     * @param batchContext Kontekst u kojem se izvršava obrada
     * @param value_date Datum valute (datum za koji se radi izvještaj)
     */
    public BO77A(BatchContext batchContext, Date value_date) throws Exception
    {
        this.bc = batchContext;
        this.value_date = value_date;

        // mapiranja
        this.mapping_2_4 = new YOYM0(bc, "2.4", value_date);    // kolaterali koji ulaze u izvještaj 2.4
        this.mapping_gctc = new YOYM0(bc, "gctc", value_date);  // GCTC kodovi

        // kreiraj workbook
        this.workbook = new SXSSFWorkbook(100);
        this.styles = ExcelStyleData.createStyles(workbook);

        // stvaranje sheet-ova sa naslovom i zaglavljem tablice
        createSheets();
    }
    
    /**
     * Metoda kreira 2 sheeta sa nazivima.
     */
    public void createSheets()
    {
        // kreiraj sheet-ove
        int[] columnWidths = new int[] { 81, 234, 111, 147, 147, 200, 105, 113, 91, 70, 140 };
        
        this.sheet[0] = workbook.createSheet("2-90 days");
        ExcelUtils.setColumnWidths(sheet[0], columnWidths);
        createHeading(this.sheet[0], "Overdue revaluation 2 - 90 days");
        rowIndex[0] = 4;

        this.sheet[1] = workbook.createSheet("more than 90 days");
        ExcelUtils.setColumnWidths(sheet[1], columnWidths);
        createHeading(this.sheet[1], "Overdue revaluation more than 90 days");
        rowIndex[1] = 4;
    }

    /**
     * Metoda stvara naslov lista kao i zaglavlje tablice
     * @param sheet list datoteke u koji je potrebno upisati naslov
     * @param title header izvještaja
     */
    public void createHeading(Sheet sheet, String title)
    {
        // kreiranje naslova
        Row row = sheet.createRow(0);
        ExcelUtils.createCell(row, 0, "2.4", styles.titleStyle);
        ExcelUtils.createCell(row, 1, "Revaluation Financial Collateral", styles.titleStyle);
        
        row = sheet.createRow(1);
        ExcelUtils.createCell(row, 1, title, styles.normalStyle);
        
        // stvaranje headera
        row = sheet.createRow(3);
        row.setHeightInPoints(39);
        ExcelUtils.createCell(row, 0, "Customer ID", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 1, "Customer Name", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 2, "Customer Rating", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 3, "Relationship manager", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 4, "Collateral ID", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 5, "Collateral type", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 6, "Last evaluation", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 7, "Latest evaluator", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 8, "WCV", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 9, "Eligibility", styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 10, "Due revaluation date", styles.normalAllBordersStyle);
    }

    
    /**
     * Metoda koja provjerava ulazi li zadani kolateral u izvještaj, dohvaæa dodatne podatke za taj kolateral i 
     * stvara redak u izlaznoj datoteci za njega (ako on u isti ulazi).
     * @param collateral Objekt s podacima o kolateralu
     * @param date Datum za koji vrijede dani podaci
     */
    public void processCollateral(CollateralData collateral, Date date) throws Exception
    {
        // provjeri da li kolateral ulazi u izvještaj 2.4
        if (mapping_2_4.resolve(collateral.col_cat_id, collateral.col_typ_id, collateral.col_sub_id) == null)
        {
            bc.debug("...Kolateral ne ulazi u izvjestaj 2.4.");
            return;
        }

        // provjera je li popunjen datum isteka revalorizacije
        if (collateral.due_revaluation_date == null)
        {
            bc.debug("...Nema datuma isteka revalorizacije. Kolateral ne ulazi u izvjestaj 2.4.");
            return;
        }

        // provjera na koji sheet je potrebno upisati kolateral
        int sheetIndex;
        if (collateral.due_revaluation_date.before(value_date))
        {
            Date two = addDays(value_date, -2);
            Date ninety = addDays(value_date, -90);
            
            // ako je revalorizacijski rok istekao prije više od 2 dana, kolateral ulazi u izvještaj
            if (collateral.due_revaluation_date.before(two))
            {
                if(collateral.due_revaluation_date.before(ninety)) sheetIndex = 1;             // više od 90 dana
                else sheetIndex = 0;                                                           // manje od 90 dana, ali više od 2
            }
            else
            {
                bc.debug("...Kolateralu je revalorizacijski rok istekao prije manje od 2 dana. Kolateral ne ulazi u izvjestaj 2.4.");
                return;  
            }
        }
        else 
        {
            bc.debug("...Kolateralu je revalorizacijski rok veci od datuma valute. Kolateral ne ulazi u izvjestaj 2.4.");
            return;
        }
        
        // dohvat GCTC koda preko mapiranja
        GcmTypeData type = mapping_gctc.resolve(collateral.col_cat_id, collateral.col_typ_id, collateral.col_sub_id);
        if (type == null)
        {
            bc.warning("...Greska u parametrizaciji - nije definiran GCTC kod. Kolateral ne ulazi u izvjestaj 2.4.");
            return;
        }
        collateral.colateral_type = type.name;

        // upisivanje podatka u izvještaj 2.4 u sheet odreðen brojem dana isteka revalorizacijskog roka
        Row row = sheet[sheetIndex].createRow(rowIndex[sheetIndex]);
        writeRow(collateral, row);
        rowIndex[sheetIndex]++;
        
        bc.debug("...Kolateral zapisan u izvjestaj 2.4.");
    }
    
    /**
     * Metoda koja podatke iz objekta sprema u proslijeðeni red.
     * @param collateral objekt sa podacima koje je potrebno upisati u izvještaj
     * @param row red u koji je potrebno zapisati podatke
     */
    public void writeRow(CollateralData collateral, Row row)
    {
        ExcelUtils.createCell(row, 0, collateral.placement_owner_register_no, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 1, collateral.placement_owner_name, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 2, collateral.placement_owner_rating, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 3, collateral.relationship_manag_name, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 4, collateral.col_num, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 5, collateral.colateral_type, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 6, collateral.last_evaluation, styles.normalDateAllBordersStyle);
        ExcelUtils.createCell(row, 7, collateral.latest_evaluator, styles.normalAllBordersStyle);
        ExcelUtils.createCell(row, 8, collateral.wcv, styles.normalNumericAllBordersStyle);
        ExcelUtils.createCell(row, 9, collateral.b2_irb_eligibility, styles.normalCenterAllBordersStyle);
        ExcelUtils.createCell(row, 10, collateral.due_revaluation_date, styles.normalDateAllBordersStyle);
    }
    
    
    /**
     * Metoda koja sprema kreirani izvještaj.
     */
    public void createReport() throws Exception
    {
        // spremi izvještaj
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd");
        String fileName = bc.getOutDir() + "/" + "Overdue_Financ_Coll" + "_" + dateFormat.format(value_date) + ".xlsx";
        FileOutputStream fileOut = new FileOutputStream(fileName);
        workbook.write(fileOut);
        fileOut.close();
        dispose();

        // kreiraj marker datoteku
        new File(fileName + ".marker").createNewFile();
        
        bc.info("Uspjesno kreiran izvjestaj 2.4.");
    }
    
    
    /**
     * Metoda koja uveæava zadani datum za odreðeni broj dana.
     * @param date Datum
     * @param days Broj dana
     * @return uveæani datum
     */
    private Date addDays(Date date, int days)
    {
        if (date == null) return date;
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_MONTH, days);
        Date retDate = new Date(calendar.getTimeInMillis());
        Date maxDate = Date.valueOf("9999-12-31");
        if (retDate.compareTo(maxDate) >= 0) return maxDate;
        else return retDate;
    }
    
    /**
     * Metoda koja briše privremene datoteke koje se stvaraju za vrijeme kreiranja izvještaja.
     */
    public void dispose()
    {
        if (workbook instanceof SXSSFWorkbook) ((SXSSFWorkbook)workbook).dispose();
    }
}