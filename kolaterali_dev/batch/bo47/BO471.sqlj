package hr.vestigo.modules.collateral.batch.bo47;

import java.sql.*;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.framework.remote.transaction.ConnCtx;
import hr.vestigo.modules.coreapp.common.yxyB.YXYB0;
import hr.vestigo.modules.coreapp.common.yxyD.YXYD0;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Vector;


public class BO471
{
    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo47/BO471.sqlj,v 1.3 2011/11/28 14:52:25 hramkr Exp $";
    
    private BatchContext batchContext;
    private ConnCtx connCtx;
    
    #sql iterator CollIterator with (holdability = true)( 
        BigDecimal col_hea_id,
        String col_num,
        BigDecimal col_cat_id,
        String coll_type_name,
        String acc_no,
        String request_no,
        String register_no,
        String customer_name,
        String inspol_ind,
        Timestamp user_lock,
        String collateral_status
    );
    
    #sql iterator PolicyIterator with (holdability = true)(
        String broj_police,
        String status,
        String napomena,
        String osiguravatelj
    );

    public BO471(BatchContext batchContext)
    {
        this.batchContext = batchContext;
        try {
            this.connCtx = batchContext.getContext();
        }
        catch (SQLException e) {
            batchContext.debug("Nema connCtx u podtransakciji!");
        }
    }
    
    /**
     * Metoda ubacuje zapis u EVENT tablicu.
     * @return EVE_ID ubaèenog zapisa ili null ako se dogodila greška.
     */
    public BigDecimal insertIntoEvent()
    {
        try
        {
            BigDecimal eve_id = null;
            YXYB0 eve1 = new YXYB0(batchContext);
            YXYD0 genId = new YXYD0(connCtx);

            batchContext.beginTransaction();
            eve_id = genId.getNewId();

            HashMap event = new HashMap();
            event.put("eve_id", eve_id);
            event.put("eve_typ_id", new BigDecimal("814036084"));
            event.put("event_date", new java.sql.Date(System.currentTimeMillis()));
            event.put("cmnt", "Izvješæe o osloboðenim kolateralima");
            event.put("use_id", batchContext.getUserID());
            event.put("ext_event_code", null);
            event.put("ext_event_num", null);
            event.put("bank_sign", batchContext.getBankSign());
            batchContext.debug("eve_id" + event.get("eve_id"));

            eve1.insertEvent(event);
            batchContext.commitTransaction();
            batchContext.updateEveID(eve_id);
            return eve_id;
        }
        catch(Exception ex)
        {
            batchContext.error("Greska pri insertiranju u event tablicu!", ex);
            return null;
        }
    }

    /**
    * Metoda koja dohvaæa podatke o osloboðenim kolateralima.
    * @param date_from Donja granica perioda oslobaðanja. Null za period bez donje granice.
    * @param date_until Gornja granica perioda oslobaðanja.   
    * @param client_type Vrsta komitenta. Moguæe vrijednosti su "P" za pravne osobe, "F" za fizièke osobe ili null za sve komitente.
    * @param col_cat_id ID kategorije kolaterala. Null za sve kategorije kolaterala. 
    * @return Iterator. Ako je došlo do greške, vraæa null.
    */
    public CollIterator selectCollaterals(Date date_from, Date date_until, String client_type, BigDecimal col_cat_id)
    {
        int filterByDateFrom = 0;
        if(date_from != null) filterByDateFrom = 1;
        
        int filterByClientType = 0;
        if("P".equals(client_type)) filterByClientType = 1;
        else if("F".equals(client_type)) filterByClientType = 2;
        
        int filterByColCat = 0;
        if(col_cat_id != null) filterByColCat = 1;
        
        CollIterator iter = null;
        try
        {
            #sql [connCtx] iter = {
                SELECT
                    a.col_hea_id        AS col_hea_id,
                    a.col_num           AS col_num,
                    a.col_cat_id        AS col_cat_id,
                    e.coll_type_name    AS coll_type_name,
                    c.acc_no            AS acc_no,
                    c.request_no        AS request_no,
                    d.register_no       AS register_no,
                    d.name              AS customer_name,
                    a.inspol_ind        AS inspol_ind,
                    a.user_lock         AS user_lock,
                    a.collateral_status AS collateral_status
                FROM
                    coll_head a,
                    coll_hf_prior b,
                    loan_beneficiary c,
                    customer d,
                    collateral_type e
                WHERE
                    (:filterByColCat = 0 OR a.col_cat_id = :col_cat_id) AND
                    (a.collateral_status = 'F' OR a.collateral_status = 'N') AND
                    (:filterByDateFrom = 0 OR DATE(a.user_lock) >= :date_from) AND
                    DATE(a.user_lock) <= :date_until AND
                    a.col_hea_id = b.hf_coll_head_id AND
                    b.coll_hf_prior_id = c.coll_hf_prior_id AND
                    c.cus_id = d.cus_id AND
                    a.col_type_id = e.coll_type_id AND
                    (:filterByClientType = 0 OR (:filterByClientType = 1 AND d.basel_cus_type NOT IN ('1','36')) OR (:filterByClientType = 2 AND d.basel_cus_type IN ('1','36')))

                UNION

                SELECT
                    a.col_hea_id        AS col_hea_id,
                    a.col_num           AS col_num,
                    a.col_cat_id        AS col_cat_id,
                    e.coll_type_name    AS coll_type_name,
                    c.acc_no            AS acc_no,
                    c.request_no        AS request_no,
                    d.register_no       AS register_no,
                    d.name              AS customer_name,
                    a.inspol_ind        AS inspol_ind,
                    a.user_lock         AS user_lock,
                    a.collateral_status AS collateral_status
                FROM
                    coll_head a,
                    loan_beneficiary c,
                    customer d,
                    collateral_type e
                WHERE
                    (:filterByColCat = 0 OR a.col_cat_id = :col_cat_id) AND
                    (a.collateral_status = 'F' OR a.collateral_status = 'N') AND
                    (:filterByDateFrom = 0 OR DATE(a.user_lock) >= :date_from) AND
                    DATE(a.user_lock) <= :date_until AND
                    a.col_hea_id = c.col_hea_id AND
                    c.cus_id = d.cus_id AND
                    a.col_type_id = e.coll_type_id AND
                    (:filterByClientType = 0 OR (:filterByClientType = 1 AND d.basel_cus_type NOT IN ('1','36')) OR (:filterByClientType = 2 AND d.basel_cus_type IN ('1','36')))

                ORDER BY 2
                WITH UR
            };
        }
        catch(SQLException ex)
        {
            batchContext.error("Greska kod dohvacanja podataka!", ex);
        }
        return iter;
    }
    
    /**
    * Metoda dohvaæa zadnju policu osiguranja vezanu za zadani kolateral.
    * @param col_hea_id ID kolaterala.
    * @return Vektor koji sadrži broj police, status police, napomenu i osiguravatelja. Ako nije dohvaæena nijedna polica ili je došlo do greške, vraæa null. 
    */    
    public Vector selectInsurancePolicy(BigDecimal col_hea_id)
    {
        try
        {
            PolicyIterator iter = null;
            
            #sql [connCtx] iter = {
                SELECT
                    a.ip_code       AS broj_police,
                    a.ip_act_noact  AS status,
                    c.sys_code_desc AS napomena, 
                    b.ic_name       AS osiguravatelj
                FROM
                    insurance_policy a,
                    insu_company b,
                    system_code_value c
                WHERE
                    a.ip_ic_id = b.ic_id AND
                    a.col_hea_id = :(col_hea_id) AND
                    a.ip_spec_stat = c.sys_code_value AND
                    c.sys_cod_id = 'clt_pol_spec_st'
                ORDER BY a.ip_vali_until DESC
                FETCH FIRST ROW ONLY
                WITH UR
            };
  
            if(iter.next())  // uzmi podatke iz prvog zapisa (ako postoji) i stavi ih u vektor
            {
                Vector vect = new Vector();
                vect.add(iter.broj_police());
                vect.add(iter.status());
                vect.add(iter.napomena());
                vect.add(iter.osiguravatelj());
                return vect;
            }
            else  // ako ne postoji nijedan zapis, vrati null
            {
                return null;
            }
        }
        catch(SQLException ex)
        {
            batchContext.error("Greska kod dohvata zadnje police osiguranja! COL_HEA_ID=" + col_hea_id, ex);
            return null;
        }
    }

    /**
     * Metoda dohvaæa dodatne podatke o kolateralu koji je polica osiguranja.
     * @param col_hea_id ID kolaterala.
     * @return Vektor koji sadrži broj police, status police, napomenu i osiguravatelja. Ako podaci nisu dohvaæeni ili je došlo do greške, vraæa null. 
     */    
     public Vector selectCollInsPolicy(BigDecimal col_hea_id)
     {
         try
         {
             PolicyIterator iter = null;
             
             #sql [connCtx] iter = {
                 SELECT
                     a.ip_code          AS broj_police,
                     a.ip_status        AS status,
                     c.sys_code_desc    AS napomena,
                     b.ic_name          AS osiguravatelj
                 FROM 
                     coll_inspolicy a,
                     insu_company b,
                     system_code_value c
                 WHERE
                     a.col_hea_id = :(col_hea_id) AND
                     a.ip_cus_id = b.ic_id AND
                     a.ip_spec_stat = c.sys_code_value AND
                     c.sys_cod_id = 'clt_pol_spec_st'
                 WITH UR  
             };

             if(iter.next())  // uzmi podatke iz prvog zapisa (ako postoji) i stavi ih u vektor
             {
                 Vector vect = new Vector();
                 vect.add(iter.broj_police());
                 vect.add(iter.status());
                 vect.add(iter.napomena());
                 vect.add(iter.osiguravatelj());
                 return vect;
             }
             else  // ako ne postoji nijedan zapis, vrati null
             {
                 return null;
             }
         }
         catch(SQLException ex)
         {
             batchContext.error("Greska kod dohvata dodatnih podataka o kolateralu! COL_HEA_ID=" + col_hea_id, ex);
             return null;
         }
     }
}