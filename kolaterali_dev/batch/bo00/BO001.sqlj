package hr.vestigo.modules.collateral.batch.bo00;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.framework.remote.transaction.ConnCtx;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.SQLException;
import java.util.HashMap;

import hr.vestigo.modules.coreapp.common.yxyB.*;
import hr.vestigo.modules.coreapp.common.yxyD.*;

/**
 *
 */
public class BO001{
	public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo00/BO001.sqlj,v 1.3 2006/08/25 09:59:54 hrazst Exp $";
	
    private BatchContext batchContext;
    private BigDecimal eve_id = null;
    private ConnCtx connCtx;
    
    #sql iterator iteratorVlasnici(String code, String first_name, String surname, String part_id, String part_id2); 
    #sql iterator iteratorHipoteke(String pokrice, String is_part_agreem, String name,BigDecimal amount_ref,String code_char,
    							   String vrstaTereta, String hf_priority, Date hf_date_hfc_from,Date hf_date_hfc_until, 
								   BigDecimal coll_hf_prior_id, BigDecimal hf_coll_head_id, String acc_no);
    #sql iterator iteratorPlasmani(String register_no, String name, String request_no, String acc_no, String priority_no);
    #sql iterator iteratorPolice  (String ip_code, String ic_name, String int_pol_type_name,BigDecimal ip_secu_val, 
    							   String code_char, Date ip_vali_from, Date ip_vali_until);
    
    public BO001(BatchContext batchContext) {
        this.batchContext = batchContext;
        try {
            this.connCtx = batchContext.getContext();
        }
        catch (SQLException e) {
            batchContext.debug("Nema connCtx u podtransakciji!");
        }
    }
    
    public void insertIntoEvent() throws Exception{
        batchContext.debug("sqlj insertIntoEvent");		
         
	  	try{
			
			YXYB0 eve1 = new YXYB0(batchContext);
		  	YXYD0 genId = new YXYD0(connCtx);			
		  	
		  	//generira se primarni kljuc tablice Event (svaki dogadaj dobiva svoj primarni kljuc)
		  	this.eve_id = genId.getNewId();
		
			HashMap event = new HashMap();
			event.put("eve_id",this.eve_id);
		  	event.put("eve_typ_id", new BigDecimal("1635506003.0"));
		  	event.put("event_date", new java.sql.Date(System.currentTimeMillis()));
		  	event.put("cmnt", " Batch za ispis unesenih kolaterala."); //TODO vidjeti sto staviti
		  	event.put("use_id", batchContext.getUserID());
		  	event.put("ext_event_code", null);
		  	event.put("ext_event_num", null); 
		   	event.put("bank_sign", batchContext.getBankSign());
		  	batchContext.debug("eve_id" + event.get("eve_id"));

		   	eve1.insertEvent(event);
		  	
		  	/* Metoda se nalazi u YXYA0.sqlj koji extenda abstract class BatchResource
		  	 * i koji se nalazi u commonu yxyA. Radi se update: 
		  	 *    UPDATE batch_log
		  	 *    SET eve_id = :newEveId
			 *    WHERE bat_log_id = :batLogId 
		  	*/
		  	batchContext.updateEveID(this.eve_id);		
	  
	  } catch(Exception e){
		  throw e;
	  }
	}  
    
    public BigDecimal getEveId(){
    	return this.eve_id;
    }
   
	public iteratorVlasnici fetchVlasnike(BigDecimal colHeaId) throws SQLException{
		iteratorVlasnici pomIterator=null;
		BigDecimal pomColHeaId=null;
		
		pomColHeaId = colHeaId;
		
        try {
            #sql [connCtx] pomIterator={
             	SELECT code, first_name, surname, part_id, part_id2 
        		FROM coll_owner
        		WHERE col_hea_id=:pomColHeaId
             };
        }
        catch (SQLException sqle) {
            throw sqle;
        }
		return pomIterator;
	}
	
	public iteratorHipoteke fetchHipoteke(BigDecimal colHeaId, String accNo) throws SQLException{
		iteratorHipoteke pomIterator=null;
		String pomAccNo=null;
		BigDecimal pomColHeaId=null;
		
		pomColHeaId = colHeaId;
		pomAccNo = accNo;
		
		if(pomAccNo==null){
			pomAccNo="%";
		}else if(pomAccNo.trim().equals("")==true){
			pomAccNo="%";
		}else{
			pomAccNo=pomAccNo.replace('*','%').trim();
		}
		
        try {
            #sql [connCtx] pomIterator={
        				SELECT f.sys_code_desc AS pokrice, is_part_agreem, b.name, amount_ref, c.code_char, 
        						e.sys_code_desc AS vrstaTereta, hf_priority, hf_date_hfc_from, hf_date_hfc_until, 
        						a.coll_hf_prior_id, a.hf_coll_head_id, d.acc_no
        				FROM coll_hf_prior a 
        				INNER JOIN customer b ON a.hf_own_cus_id=b.cus_id 
        				INNER JOIN currency c ON a.cur_id_ref=c.cur_id 
        				LEFT OUTER JOIN loan_beneficiary d ON a.coll_hf_prior_id = d.coll_hf_prior_id
        				LEFT OUTER JOIN system_code_value e ON a.hf_hfc_id=e.sys_cod_val_id 
        				LEFT OUTER JOIN system_code_value f ON a.how_cover=f.sys_cod_val_id 
        				WHERE 
        					a.hf_coll_head_id=:pomColHeaId
        				AND	d.acc_no LIKE :pomAccNo
             };
        }
        catch (SQLException sqle) {
            throw sqle;
        }
		return pomIterator;
	}	
	
	public iteratorPlasmani fetchPlasmane(BigDecimal collHfPriorId, String accNo) throws SQLException{
		iteratorPlasmani pomIterator=null;
		String pomAccNo=null;
		BigDecimal pomCollHfPriorId=null;

		pomCollHfPriorId = collHfPriorId;
		pomAccNo = accNo;
		
		if(pomAccNo==null){
			pomAccNo="%";
		}else if(pomAccNo.trim().equals("")==true){
			pomAccNo="%";
		}else{
			pomAccNo=pomAccNo.replace('*','%').trim();
		}
		
        try {
            #sql [connCtx] pomIterator={
        					SELECT a.register_no, b.name, a.request_no, a.acc_no, a.priority_no
        					FROM loan_beneficiary a
        					INNER JOIN customer b ON a.cus_id = b.cus_id
        					WHERE 
        							coll_hf_prior_id=:pomCollHfPriorId
        					AND 	acc_no LIKE :pomAccNo
             };
        }
        catch (SQLException sqle) {
            throw sqle;
        }
		return pomIterator;
	}	
	
	public iteratorPolice fetchPolice(BigDecimal colHeaId) throws SQLException{
		iteratorPolice pomIterator=null;
		BigDecimal pomColHeaId=null;
		
		pomColHeaId = colHeaId;
		
        try {
            #sql [connCtx] pomIterator={
        					SELECT a.ip_code, b.ic_name, c.int_pol_type_name, a.ip_secu_val, d.code_char, 
        							a.ip_vali_from, a.ip_vali_until
        					FROM insurance_policy a
        					INNER JOIN insu_company b ON a.ip_ic_id=b.ic_id
        					INNER JOIN insu_policy_type c ON a.ip_type_id=c.int_pol_type_id
        					INNER JOIN currency d ON a.ip_cur_id=d.cur_id
        					WHERE 
        							a.col_hea_id=:pomColHeaId
             };
        }
        catch (SQLException sqle) {
            throw sqle;
        }
		return pomIterator;
	}
	
	public String getUseOpenName(String useId){
		String name = null;
		
    	try{
    		#sql [connCtx]{
    					SELECT user_name INTO :name
    					FROM app_user 
    					WHERE use_id = :useId
    		};
    	}catch(SQLException sqle){
    		if (sqle.getErrorCode()!=100){
        		sqle.printStackTrace();
    		}
    	}
		if (name == null) name="";    	
		return name;
	}
	
	public String getOrgUnitName(String orgUnitId){
		String name = null;
		
		if (orgUnitId.compareTo("")==0){
			name="";
		}else{
	    	try{
	    		#sql [connCtx]{
    					SELECT name INTO :name 
	    				FROM organization_unit 
	    				WHERE org_uni_id = :orgUnitId
    		};
	    	}catch(SQLException sqle){
	    		if (sqle.getErrorCode()!=100){
	        		sqle.printStackTrace();
	    		}
	    	}
		}
		if (name == null) name="";    	
		return name;		
	}
	
}
