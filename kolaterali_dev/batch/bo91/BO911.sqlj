package hr.vestigo.modules.collateral.batch.bo91;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.framework.remote.transaction.ConnCtx;
import hr.vestigo.modules.collateral.common.yoy0.YOY00;

import java.math.BigDecimal;
import java.sql.*;


/**
* SQLJ za Uèitavanje koeficijenata promjene za revalorizaciju.
* @author hrakis
*/
public class BO911
{
    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo91/BO911.sqlj,v 1.2 2014/09/25 14:26:30 hrakis Exp $";
    
    private BatchContext bc;
    private ConnCtx connCtx;
    
   
    #sql iterator CollateralTypeIterator (
        BigDecimal col_gcm_typ_id,
        String name
    );
    
    #sql iterator LocationIterator (
        BigDecimal id,
        String code,
        String name
    );
    
    #sql iterator RevaKoefIterator (
        String col_gcm_type_name,
        String county_code,
        String county_name,
        String county_type,
        String city_code,
        String city_name,
        String city_type,
        String cada_code,
        String cada_name,
        String cada_type,
        Integer est_year,
        BigDecimal value_from,
        BigDecimal value_to,
        Integer age_from,
        Integer age_to,
        BigDecimal koef_rev
    );

              
    public BO911(BatchContext batchContext) throws Exception
    {
        this.bc = batchContext;
        this.connCtx = bc.getContext();
    }
    
    
    /** 
     * Metoda koja evidentira izvoðenje obrade ubacujuæi novi zapis u tablicu COL_PROC.
     * @return ID zapisa iz tablice COL_PROC.
     */
    public BigDecimal insertIntoColProc() throws Exception
    {
        try
        {
            bc.startStopWatch("BO911.insertIntoColProc");
            
            YOY00 yoy00 = new YOY00(connCtx);
            BigDecimal col_pro_id = yoy00.getNewId();

            #sql [connCtx] {
                INSERT INTO col_proc (
                    col_pro_id,
                    proc_date,
                    value_date,
                    proc_type,
                    proc_way,
                    proc_status,
                    col_number,
                    org_uni_id,
                    use_id,
                    user_lock )
                VALUES (
                    :(col_pro_id),
                    CURRENT DATE,
                    CURRENT DATE,
                    'RU',
                    'R',
                    '0',
                    0,
                    53253,
                    1,
                    CURRENT TIMESTAMP )
            };

            return col_pro_id;
        }
        catch(Exception ex)
        {
            error("Dogodila se nepredvidjena greska pri evidentiranju izvodjenja obrade u modulu kolaterala!", ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO911.insertIntoColProc");
        }
    }
    
    /**
     * Metoda koja evidentira završetak izvoðenja obrade u tablicu COL_PROC.
     * @param col_pro_id ID obrade
     * @param count broj zapisa koje je generirala obrada
     */
    public void updateColProc(BigDecimal col_pro_id, int count) throws Exception
    {
        try
        {
            bc.startStopWatch("BO911.updateColProc");
            
            #sql [connCtx] {
                UPDATE col_proc
                SET col_number = :(count),
                    proc_ts = CURRENT TIMESTAMP,
                    proc_status = '1',
                    user_lock = CURRENT TIMESTAMP
                WHERE col_pro_id = :(col_pro_id)
            };
        }
        catch(SQLException ex)
        {
            error("Dogodila se nepredvidjena greska pri evidentiranju zavrsetka izvodjenja obrade u modulu kolaterala! ID obrade = " + col_pro_id, ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO911.updateColProc");
        }
    }


    /**
     * Metoda dohvaæa podatke o mapiranim tipovima kolaterala za revalorizaciju.
     * @return iterator s podacima
     */
    public CollateralTypeIterator selectCollateralTypes() throws Exception
    {
        try
        {
            CollateralTypeIterator iter = null;
            #sql [connCtx] iter = { 
                SELECT
                    a.col_gcm_typ_id AS col_gcm_typ_id,
                    a.name           AS name
                FROM coll_gcm_type a
                WHERE a.map_code LIKE 'reva_typ_%'
                AND CURRENT DATE BETWEEN a.date_from AND a.date_until
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            error("Dogodila se nepredvidjena greska kod dohvata mapiranih tipova kolaterala za revalorizaciju!", ex);
            throw ex;
        }
    }
    
    
    /**
     * Metoda dohvaæa podatke o svim katastarskim opæinama.
     * @return iterator s podacima
     */
    public LocationIterator selectCadastralMunicipalities() throws Exception
    {
        try
        {
            LocationIterator iter = null;
            #sql [connCtx] iter = { 
                SELECT
                    a.cad_map_id    AS id,
                    a.code          AS code,
                    a.name          AS name
                FROM cadastre_map a
                WHERE a.cad_map_typ_id = 4444
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            error("Dogodila se nepredvidjena greska kod dohvata katastarskih opcina!", ex);
            throw ex;
        }
    }
    
    
    /**
     * Metoda dohvaæa podatke o svim mjestima.
     * @return iterator s podacima
     */
    public LocationIterator selectCities() throws Exception
    {
        try
        {
            LocationIterator iter = null;
            #sql [connCtx] iter = { 
                SELECT
                    a.pol_map_id    AS id,
                    a.code          AS code,
                    a.name          AS name
                FROM political_map a
                WHERE a.pol_map_typ_id = 5999
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            error("Dogodila se nepredvidjena greska kod dohvata gradova!", ex);
            throw ex;
        }
    }
    
    
    /**
     * Metoda dohvaæa podatke o svim županijama.
     * @return iterator s podacima
     */
    public LocationIterator selectCounties() throws Exception
    {
        try
        {
            LocationIterator iter = null;
            #sql [connCtx] iter = { 
                SELECT
                    a.pol_map_id    AS id,
                    a.code          AS code,
                    a.name          AS name
                FROM political_map a
                WHERE a.pol_map_typ_id = 3999
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            error("Dogodila se nepredvidjena greska kod dohvata zupanija!", ex);
            throw ex;
        }
    }
    
    
    /**
     * Metoda koja deaktivira sve trenutno važeæe koeficijente.
     */
    public void deactivateCoefficients() throws Exception
    {
        try
        {
            bc.startStopWatch("BO911.deactivateCoefficients");
            
            #sql [connCtx] {
                UPDATE
                    reva_koef
                SET 
                    date_until = CURRENT DATE - 1 DAY,
                    status = 'N',
                    user_lock = CURRENT TIMESTAMP
                WHERE
                    status = 'A'
            };
        }
        catch(SQLException ex)
        {
            error("Dogodila se nepredvidjena greska pri deaktivaciji koeficijenata promjene!", ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO911.deactivateCoefficients");
        }
    }
    
    
    /**
     * Metoda koja zaspisuje koeficijent promjene za revalorizaciju u bazu podataka.
     * @param col_pro_id ID obrade
     * @param data objekt s podacima o koeficijentu promjene
     */
    public void insertIntoRevaKoef(BigDecimal col_pro_id, RevaKoefData data) throws Exception
    {
        try
        {
            bc.startStopWatch("BO911.insertIntoRevaKoef");
            
            YOY00 yoy00 = new YOY00(connCtx);
            BigDecimal rev_koe_id = yoy00.getNewId();
            
            BigDecimal county_id = data.county != null ? data.county.id : null;
            BigDecimal city_id = data.city != null ? data.city.id : null;
            BigDecimal cada_id = data.cadastralMunicipality != null ? data.cadastralMunicipality.id : null;
            
            #sql [connCtx] {
                INSERT INTO reva_koef (
                    rev_koe_id,
                    col_cat_id,
                    col_typ_id,
                    col_sub_id,
                    col_gcm_typ_id,
                    county_id,
                    city_id,
                    district_id,
                    cada_id,
                    est_year,
                    value_from,
                    value_to,
                    age_from,
                    age_to,
                    koef_rev,
                    date_from,
                    date_until,
                    status,
                    use_id,
                    col_pro_id,
                    opening_ts,
                    user_lock
                ) VALUES (
                    :(rev_koe_id),
                    NULL,
                    NULL,
                    NULL,
                    :(data.collateralType.id),
                    :(county_id),
                    :(city_id),
                    NULL,
                    :(cada_id),
                    :(data.est_year),
                    :(data.value_from),
                    :(data.value_to),
                    :(data.age_from),
                    :(data.age_to),
                    :(data.koef_rev),
                    CURRENT DATE,
                    '9999-12-31',
                    'A',
                    1,
                    :(col_pro_id),
                    CURRENT TIMESTAMP,
                    CURRENT TIMESTAMP
                )
            };
        }
        catch(SQLException ex)
        {
            error("Dogodila se nepredvidjena greska pri zapisivanju koeficijenta promjene u bazu podataka! (" + data + ")", ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO911.insertIntoRevaKoef");
        }
    }
    
    
    /**
     * Metoda dohvaæa podatke o važeæim koeficijentima promjene za revalorizaciju.
     * @return iterator s podacima
     */
    public RevaKoefIterator selectRevalorizationCoefficients() throws Exception
    {
        try
        {
            RevaKoefIterator iter = null;
            #sql [connCtx] iter = { 
                SELECT
                    h.name          AS col_gcm_type_name,
                    b.code          AS county_code,
                    b.name          AS county_name,
                    c.name          AS county_type,
                    d.code          AS city_code,
                    d.name          AS city_name,
                    e.name          AS city_type,
                    f.code          AS cada_code,
                    f.name          AS cada_name,
                    g.name          AS cada_type,
                    a.est_year      AS est_year,
                    a.value_from    AS value_from,
                    a.value_to      AS value_to,
                    a.age_from      AS age_from,
                    a.age_to        AS age_to,
                    a.koef_rev      AS koef_rev
                FROM reva_koef a
                    LEFT OUTER JOIN political_map b ON a.county_id = b.pol_map_id
                    LEFT OUTER JOIN political_map_type c ON b.pol_map_typ_id = c.pol_map_typ_id
                    LEFT OUTER JOIN political_map d ON a.city_id = d.pol_map_id
                    LEFT OUTER JOIN political_map_type e ON d.pol_map_typ_id = e.pol_map_typ_id
                    LEFT OUTER JOIN cadastre_map f ON a.cada_id = f.cad_map_id
                    LEFT OUTER JOIN cadastre_map_type g ON f.cad_map_typ_id = g.cad_map_typ_id
                    INNER JOIN coll_gcm_type h ON a.col_gcm_typ_id = h.col_gcm_typ_id
                WHERE status = 'A'
                ORDER BY h.name, b.name, d.name, f.name, a.est_year, a.value_from, a.age_from
            };
            return iter;
        }
        catch (SQLException ex)
        {
            error("Dogodila se nepredvidjena greska kod dohvata vazecih koeficijenata promjene za revalorizaciju!", ex);
            throw ex;
        }
    }
    
    
    /**
     * Metoda evidentira datum uèitavanja koeficijenata za revalorizaciju.
     */
    public void updateLastDate() throws Exception
    {
        try
        {
            bc.startStopWatch("BO911.updateLastDate");
            
            int number = 0;
            #sql [connCtx] {
                SELECT COUNT(*) INTO :(number) FROM dwh_status WHERE obrada = 'bo91' WITH UR
            };
            
            if (number == 0)
            {
                #sql [connCtx] {
                    INSERT INTO dwh_status (obrada, datum, status, user_lock) VALUES ('bo91', CURRENT DATE, '1', CURRENT TIMESTAMP)
                };
            }
            else
            {
                #sql [connCtx] {
                    UPDATE dwh_status SET datum = CURRENT DATE, status = '1', user_lock = CURRENT TIMESTAMP WHERE obrada = 'bo91'
                };
            }
        }
        catch(Exception ex)
        {
            error("Dogodila se nepredvidjena greska pri evidentiranju datuma ucitavanja koeficijenata za revalorizaciju!", ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO911.updateLastDate");
        }
    }

    
    private void error(String message, Exception ex) throws Exception
    {
        if (ex != null) bc.error(message, ex); else bc.error(message, new String[]{});
        bc.userLog("GRESKA: " + message);
    }
}