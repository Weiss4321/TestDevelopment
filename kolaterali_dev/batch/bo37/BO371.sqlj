package hr.vestigo.modules.collateral.batch.bo37;

import java.sql.*;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.framework.remote.transaction.ConnCtx;
import hr.vestigo.modules.coreapp.common.yxyB.YXYB0;
import hr.vestigo.modules.coreapp.common.yxyD.YXYD0;
import hr.vestigo.modules.collateral.common.yoy0.YOY00;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Vector;


public class BO371
{
    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo37/BO371.sqlj,v 1.3 2014/03/10 13:28:43 hrakis Exp $";
    
    private BatchContext batchContext;
    private ConnCtx connCtx;
    
    #sql iterator DeactivatedCollateralsIterator with (holdability = true) 
    	(BigDecimal col_hea_id,
    	String col_num,
   		String collateral_status,
    	String cus_acc_no,
    	String request_no,
    	String loan_register_no,
    	String loan_name,
    	String b2_type,
        BigDecimal col_cat_id);
    

    public BO371(BatchContext batchContext)
    {
        this.batchContext = batchContext;
        try {
            this.connCtx = batchContext.getContext();
        }
        catch (SQLException e) {
            batchContext.debug("Nema connCtx u podtransakciji!");
        }
    }
	
	public BigDecimal insertIntoEvent()
	{
        try
        {
        	BigDecimal eve_id = null;
        	YXYB0 eve1 = new YXYB0(batchContext);
        	YXYD0 genId = new YXYD0(connCtx);

        	batchContext.beginTransaction();
        	eve_id = genId.getNewId();

        	HashMap event = new HashMap();
        	event.put("eve_id", eve_id);
        	event.put("eve_typ_id", new BigDecimal("2775554003"));
        	event.put("event_date", new java.sql.Date(System.currentTimeMillis()));
        	event.put("cmnt", "Izvješæe o slobodnim/deaktiviranim kolateralima");
        	event.put("use_id", batchContext.getUserID());
        	event.put("ext_event_code", null);
        	event.put("ext_event_num", null);
        	event.put("bank_sign", batchContext.getBankSign());
        	batchContext.debug("eve_id" + event.get("eve_id"));

        	eve1.insertEvent(event);
        	batchContext.commitTransaction();
        	batchContext.updateEveID(eve_id);
        	return eve_id;
        }
        catch(Exception ex)
        {
            batchContext.error("Greska pri insertiranju u event tablicu!", ex);
            return null;
        }
    }

	
	/**
	 * Metoda koja iz tablice COL_PROC dohvaæa ID i datum zadnje izvedene obrade za deaktivaciju/oslobaðanje kolaterala.
	 * @return Vektor s atributima col_pro_id i value_date ukoliko je metoda uspješno završila, inaèe null.
	 */
	public Vector selectColProId()
	{
		Vector vect = new Vector();
		BigDecimal col_pro_id;
		Date value_date;
		try
		{
			#sql [connCtx] {
				SELECT col_pro_id, value_date
				INTO :col_pro_id, :value_date
				FROM col_proc
				WHERE proc_type = 'O'
				AND	value_date = (SELECT MAX(b.value_date) FROM col_proc b WHERE b.proc_type = 'O')
				ORDER BY col_pro_id DESC
				FETCH FIRST ROW ONLY
			};
			vect.add(col_pro_id);
			vect.add(value_date);
		}
		catch(SQLException ex)
		{
			batchContext.error("Greska kod dohvata zadnje izvedene obrade!", ex);
			return null;
		}
		return vect;
	}

	
	/**
	 * Metoda koja dohvaæa skup podataka koji ulaze u izvješæe.
	 * U izvješæe ulaze svi kolaterali koji su deaktivirani/osloboðeni izvoðenjem zadane obrade.
	 * @param col_pro_id ID obrade
	 * @return Iterator. Ako je došlo do greške, vaæa null.
	 */
	public DeactivatedCollateralsIterator selectDeactivatedCollaterals(BigDecimal col_pro_id)
	{
		DeactivatedCollateralsIterator iter = null;
		try
		{
			#sql [connCtx] iter = {
				SELECT 
					b.col_hea_id 		AS col_hea_id,
					b.col_num 			AS col_num,
		            b.col_cat_id        AS col_cat_id,  
					b.collateral_status	AS collateral_status,
					d.acc_no 			AS cus_acc_no,
					d.request_no 		AS request_no,
					e.register_no 		AS loan_register_no,
					e.name 				AS loan_name,
					e.basel_cus_type 	AS b2_type
				FROM
					in_data_dwh_item a,
					coll_head b,
					coll_hf_prior c,
					loan_beneficiary d,
					customer e
				WHERE
					a.col_pro_id = (:col_pro_id) AND
					a.status = '0' AND
					a.input_id = b.col_hea_id AND
					b.col_hea_id = c.hf_coll_head_id AND
					c.coll_hf_prior_id = d.coll_hf_prior_id AND
					d.cus_id = e.cus_id
				
				UNION

				SELECT 
					b.col_hea_id 		AS col_hea_id,					
					b.col_num 			AS col_num,
                    b.col_cat_id        AS col_cat_id,  
					b.collateral_status	AS collateral_status,
					d.acc_no 			AS cus_acc_no,
					d.request_no 		AS request_no,
					e.register_no 		AS loan_register_no,
					e.name 				AS loan_name,
					e.basel_cus_type 	AS b2_type
				FROM
					in_data_dwh_item a,
					coll_head b,
					loan_beneficiary d,
					customer e
				WHERE 
					a.col_pro_id = (:col_pro_id) AND
					a.status = '0' AND
					a.input_id = b.col_hea_id AND
					b.col_hea_id = d.col_hea_id AND
					d.cus_id = e.cus_id
				ORDER BY 1
				WITH UR
			};
		}
		catch(SQLException ex)
		{
			batchContext.error("Greska kod dohvacanja deaktiviranih/oslobodjenih kolaterala!", ex);
		}
		return iter;
	}
	

	/**
	 * Metoda koja dohvaæa podatke o vlasniku zadanog kolaterala
	 * @param col_hea_id ID kolaterala
	 * @return Vektor s atributima register_no i name ukoliko je metoda uspješno završila, inaèe null. 
	 */
	public Vector selectCollateralOwner(BigDecimal col_hea_id)
	{
		Vector vect = new Vector();
		String register_no;
		String name;
		try
		{
			#sql [connCtx] {
				SELECT c.register_no, c.name
				INTO :register_no, :name
				FROM
					coll_owner a,
					customer c
				WHERE 
					a.col_hea_id = :col_hea_id AND
					a.date_until = '9999-12-31' AND
					a.cus_id = c.cus_id AND
					c.status = '0' 
				ORDER BY ser_num
				FETCH FIRST ROW ONLY
			};
			vect.add(register_no);
			vect.add(name);
		}
		catch(SQLException ex)
		{
			return null;
		}
		return vect;
	}


    /**
     * Metoda koja dohvaæa podatke o plasmanu
     * @param cus_acc_no plasmana
     * @return Vektor s atributima dwh_status i status_u_modulu ukoliko je metoda uspješno završila, inaèe null. 
     */
    public Vector selectPlasman(String cus_acc_no)
    {
        Vector vect = new Vector();
        String dwh_status;
        String status_u_modulu;
        try
        {
            #sql [connCtx] {
                SELECT cus_acc_status, cus_acc_orig_st 
                INTO :dwh_status, :status_u_modulu
                FROM
                    cusacc_exposure
                WHERE 
                    cus_acc_no = :cus_acc_no
            };
            vect.add(dwh_status);
            vect.add(status_u_modulu);
        }
        catch(SQLException ex)
        {
            return null;
        }
        return vect;
    }
	
    /**
     * Metoda koja dohvaæa podatke o depozitu
     * @param col_hea_id ID kolaterala
     * @return Vektor s atributima prolongat, status, cde_dep_unti, cde_account ukoliko je metoda uspješno završila, inaèe null. 
     */
    public Vector selectCashDep(BigDecimal col_hea_id)
    {
        Vector vect = new Vector();
        String prolongat;
        String status;
        Date cde_dep_unti;
        String cde_account;
        try
        {
            #sql [connCtx] {
                SELECT cde_dep_unti, cde_account, cde_prolong,  status 
                INTO :cde_dep_unti, :cde_account, :prolongat, :status
                FROM
                    coll_cashdep
                WHERE 
                    col_hea_id = :col_hea_id
            };
            vect.add(cde_dep_unti);
            vect.add(cde_account);
            vect.add(prolongat);
            vect.add(status);
        }
        catch(SQLException ex)
        {
            return null;
        }
        return vect;
    } 
     
    /**
     * Metoda koja dohvaæa podatke o garanciji
     * @param col_hea_id ID kolaterala
     * @return Vektor s atributima respiro_date, guar_datn_unti ukoliko je metoda uspješno završila, inaèe null. 
     */
    public Vector selectGarancija(BigDecimal col_hea_id)
    {
        Vector vect = new Vector();
        Date respiro_date;
        Date guar_datn_unti;

        try
        {
            #sql [connCtx] {
                SELECT respiro_date, guar_datn_unti 
                INTO :respiro_date, :guar_datn_unti
                FROM
                    coll_guarantee
                WHERE 
                    col_hea_id = :col_hea_id
            };
            vect.add(respiro_date);
            vect.add(guar_datn_unti);
        }
        catch(SQLException ex)
        {
            return null;
        }
        return vect;
    } 

    /**
     * Metoda koja dohvaæa podatke o obveznici
     * @param col_hea_id ID kolaterala
     * @return Vektor s atributima maturity_date ukoliko je metoda uspješno završila, inaèe null. 
     */
    public Vector selectObveznica(BigDecimal col_hea_id)
    {
        Vector vect = new Vector();
        Date maturity_date;
 
        try 
        {
            #sql [connCtx] {
                SELECT c.maturity_date
                INTO :maturity_date
                FROM
                    coll_head a,
                    coll_vrp b,
                    coll_in2 c
                where 
                    a.col_hea_id = :(col_hea_id) and
                    a.col_hea_id = b.col_hea_id and
                    b.col_in2_id = c.col_in2_id    
             };
            vect.add(maturity_date);
        }
        catch(SQLException ex)
        {
            return null;
        }
        return vect;
    } 
}