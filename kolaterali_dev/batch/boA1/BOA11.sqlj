package hr.vestigo.modules.collateral.batch.boA1;

import java.sql.*;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.framework.remote.transaction.ConnCtx;
import hr.vestigo.framework.remote.transaction.VestigoTMException;
import hr.vestigo.modules.coreapp.common.yxyB.YXYB0;
import hr.vestigo.modules.coreapp.common.yxyD.YXYD0;

import java.math.BigDecimal;
import java.util.HashMap;


public class BOA11
{
    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/boA1/BOA11.sqlj,v 1.1 2017/02/27 12:24:26 hrakis Exp $";
    
    private BatchContext batchContext;
    private ConnCtx connCtx;
    
    private final String policy_type_coll = "K";
    private final String policy_type_inspol = "P";
    
    #sql iterator Iter1(
        BigDecimal id,
        String ip_code,
        Date ip_paid_until,
        String ic_name,
        BigDecimal col_hea_id,
        String col_num,
        String cus_acc_no,
        Date due_date,
        String cus_acc_orig_st,
        BigDecimal cus_id,
        String register_no,
        String name,
        String customer_status,
        String org_uni_code
    );

    public BOA11(BatchContext batchContext) throws SQLException
    {
        this.batchContext = batchContext;
        this.connCtx = batchContext.getContext();
    }
    
    /**
     * Metoda ubacuje zapis u EVENT tablicu.
     * @return EVE_ID ubaèenog zapisa ili null ako se dogodila greška.
     */
    public BigDecimal insertIntoEvent()
    {
        try
        {
            batchContext.startStopWatch("BOA11.insertIntoEvent");
            batchContext.beginTransaction();

            BigDecimal eve_id = new YXYD0(connCtx).getNewId();
            batchContext.debug("eve_id = " + eve_id);
            
            HashMap event = new HashMap();
            event.put("eve_id", eve_id);
            event.put("eve_typ_id", new BigDecimal("1215314327"));
            event.put("event_date", new Date(System.currentTimeMillis()));
            event.put("cmnt", "Lista kandidata za pozivanje");
            event.put("use_id", batchContext.getUserID());
            event.put("ext_event_code", null);
            event.put("ext_event_num", null);
            event.put("bank_sign", batchContext.getBankSign());

            new YXYB0(batchContext).insertEvent(event);
            batchContext.updateEveID(eve_id);

            batchContext.commitTransaction();
            batchContext.stopStopWatch("BOA11.insertIntoEvent");
            return eve_id;
        }
        catch (Exception ex)
        {
            batchContext.error("Greska pri ubacivanju zapisa u event tablicu!", ex);
            return null;
        }
    }
    
    /**
     * Metoda koja dohvaæa potrebne podatke za izvješæe.
     * @return Iterator.
     */
    public Iter1 selectData(String policy_type, String cust_type, Date date) throws Exception
    {
        try
        {
            batchContext.startStopWatch("BOA11.selectData");
            
            Iter1 iter = null;
            #sql [connCtx] iter = {
                SELECT
                    i.ip_id             AS id,
                    i.ip_code           AS ip_code,
                    i.ip_vali_until     AS ip_paid_until,
                    ic.ic_name          AS ic_name,
                    c.col_hea_id        AS col_hea_id,
                    c.col_num           AS col_num,
                    e.cus_acc_no        AS cus_acc_no,
                    e.due_date          AS due_date,
                    e.cus_acc_orig_st   AS cus_acc_orig_st,
                    cc.cus_id           AS cus_id,
                    cc.register_no      AS register_no,
                    cc.name             AS name,
                    s2.sys_code_desc    AS customer_status,
                    o.code              AS org_uni_code
                FROM insurance_policy i
                INNER JOIN insu_company ic ON i.ip_ic_id = ic.ic_id
                INNER JOIN coll_head c ON i.col_hea_id = c.col_hea_id
                INNER JOIN coll_hf_prior h ON (c.col_hea_id = h.hf_coll_head_id AND h.hf_status = 'A' AND h.hf_own_cus_id = 8218251)
                INNER JOIN loan_beneficiary l ON (h.coll_hf_prior_id = l.coll_hf_prior_id AND l.status = 'A')
                INNER JOIN cusacc_exposure e ON (l.la_acc_id = e.cus_acc_id OR l.acc_no = e.cus_acc_no OR l.request_no = e.request_no)
                INNER JOIN customer cc ON e.cus_id = cc.cus_id
                INNER JOIN system_code_value s2 ON (s2.sys_cod_id = 'status' AND cc.status = s2.sys_code_value)
                INNER JOIN organization_unit o ON e.org_uni_id = o.org_uni_id
                WHERE i.ip_act_noact = 'A'
                  AND i.ip_vali_until BETWEEN CURRENT DATE AND :(date)
                  AND i.wrn_status = '0'
                  AND c.col_cat_id = 618223
                  AND c.collateral_status IN ('1','2','3')
                  AND cc.basel_cus_type IN ('1','36')
                  AND NOT EXISTS (
                    SELECT i2.ip_id
                    FROM insurance_policy i2
                    WHERE i2.col_hea_id = i.col_hea_id
                      AND i2.ip_act_noact = 'A'
                      AND i2.ip_vali_until > :(date)
                      AND i2.wrn_status = '0'
                  )
                ORDER BY c.col_num, e.cus_acc_no
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            batchContext.error("Greska kod dohvacanja podataka za izvjesce!", ex);
            throw ex;
        }
        finally
        {
            batchContext.stopStopWatch("BOA11.selectData");
        }
    }
    
    
    /**
     * Metoda koja dohvaæa podatke o komitentu.
     * @param cus_id ID komitenta
     * @return HashMap s podacima o komitentu
     */
    public HashMap selectCustomerData(BigDecimal cus_id) throws Exception
    {
        batchContext.startStopWatch("BOA11.selectCustomerData");
        
        HashMap map = new HashMap();
        
        try
        {
            String phone = null;
            #sql [connCtx] {
                SELECT com_adress
                INTO :(phone)
                FROM cust_communication
                WHERE cus_id = :(cus_id) 
                  AND add_typ_id = 'MAINFIXPHONE'
                  AND CURRENT DATE BETWEEN date_from AND date_until 
                FETCH FIRST ROW ONLY 
                WITH UR
            };
            map.put("phone", phone);
        }
        catch (SQLException ex)
        {
            if (!batchContext.getSQLExHandler().isEmptyRowset(ex))
            {
                batchContext.error("Greska kod dohvata podataka o komitentu (CUS_ID = " + cus_id + ")!", ex);
                throw ex;
            }
        }
        
        try
        {
            String mobile = null;
            #sql [connCtx] {
                SELECT com_adress
                INTO :(mobile)
                FROM cust_communication
                WHERE cus_id = :(cus_id) 
                  AND add_typ_id = 'MAINCELLULAR'
                  AND CURRENT DATE BETWEEN date_from AND date_until 
                FETCH FIRST ROW ONLY 
                WITH UR
            };
            map.put("mobile", mobile);
        }
        catch (SQLException ex)
        {
            if (!batchContext.getSQLExHandler().isEmptyRowset(ex))
            {
                batchContext.error("Greska kod dohvata podataka o komitentu (CUS_ID = " + cus_id + ")!", ex);
                throw ex;
            }
        }        
        
        batchContext.stopStopWatch("BOA11.selectCustomerData");
        
        return map;
    }
    
    
    /**
     * Metoda ispituje da li je prva aktivna RBA hipoteka zadanog kolaterala povezana na plasman èiji je vlasnik komitent B2 asset klase 1 ili 36.
     * @param col_hea_id ID kolaterala
     */
    public String selectRetailPlacementOwner(BigDecimal col_hea_id) throws Exception
    {
        try
        {
            batchContext.startStopWatch("BOA11.selectRetailPlacementOwner");
            
            // prva aktivna RBA hipoteka na zadanom kolateralu
            BigDecimal coll_hf_prior_id = null;
            String hf_priority = null;
            #sql [connCtx] {
                SELECT coll_hf_prior_id, hf_priority
                INTO :(coll_hf_prior_id), :(hf_priority)
                FROM coll_hf_prior
                WHERE hf_coll_head_id = :(col_hea_id)
                  AND hf_status = 'A'
                  AND hf_own_cus_id = 8218251
                ORDER BY hf_priority
                FETCH FIRST ROW ONLY
                WITH UR
            };
            
            // da li postoji fizièka osoba vlasnik plasmana povezanog na hipoteku
            String owner_name = null, owner_register_no = null, cus_acc_no = null;
            #sql [connCtx] {
                SELECT c.name, c.register_no, e.cus_acc_no
                INTO :(owner_name), :(owner_register_no), :(cus_acc_no)
                FROM loan_beneficiary l
                INNER JOIN cusacc_exposure e ON (l.la_acc_id = e.cus_acc_id OR l.acc_no = e.cus_acc_no OR l.request_no = e.request_no)
                INNER JOIN customer c ON e.cus_id = c.cus_id
                WHERE l.coll_hf_prior_id = :(coll_hf_prior_id)
                  AND l.status = 'A'
                  AND c.basel_cus_type IN ('1','36')
                FETCH FIRST ROW ONLY  
                WITH UR
            };
            
            return "hipoteka #" + hf_priority + " -> plasman " + cus_acc_no + " -> vlasnik plasmana " + owner_register_no + " " + owner_name;
        }
        catch (SQLException ex)
        {
            if (batchContext.getSQLExHandler().isEmptyRowset(ex))
            {
                return null;
            }
            else
            {
                batchContext.error("Greska kod ispitivanja da li polica osiguranja pripada Retailu!", ex);
                throw ex;
            }
        }
        finally
        {
            batchContext.stopStopWatch("BOA11.selectRetailPlacementOwner");
        }
    }
    
}