package hr.vestigo.modules.collateral.batch.bo78;

import hr.vestigo.framework.remote.batch.BatchContext;
import hr.vestigo.framework.remote.transaction.ConnCtx;
import hr.vestigo.modules.collateral.common.yoy0.YOY00;
import hr.vestigo.modules.coreapp.common.yxyB.YXYB0;
import hr.vestigo.modules.coreapp.common.yxyD.YXYD0;

import java.math.BigDecimal;
import java.sql.*;
import java.util.HashMap;


/**
* SQLJ za Izvještaj o omjeru osigurane svote i NGV-a
* @author hrakis
*/
public class BO781 {

    public static String cvsident = "@(#) $Header: /var/cvsroot/java/src/hr/vestigo/modules/collateral/batch/bo78/BO781.sqlj,v 1.3 2016/07/06 11:24:00 hrakis Exp $";
    
    private BatchContext bc;
    private ConnCtx connCtx;
    
    
    #sql iterator CollateralIterator (
        BigDecimal col_hea_id,
        String col_num,
        BigDecimal new_build_val,
        BigDecimal real_est_nm_cur_id
    );
    
    #sql iterator InsurancePolicyIterator (
        BigDecimal ip_id,
        String ip_code,
        BigDecimal ip_secu_val,
        BigDecimal ip_cur_id
    );
    
    #sql iterator PlacementIterator (
        BigDecimal cus_acc_id,
        String cus_acc_no,
        BigDecimal exposure_balance,
        BigDecimal exposure_cur_id,
        Date due_date,
        String register_no,
        String name,
        BigDecimal cus_typ_id,
        String referent
    );
    
              
    public BO781(BatchContext batchContext) throws SQLException
    {
        this.bc = batchContext;
        this.connCtx = bc.getContext();
    }
    
    /**
     * Metoda koja dohvaæa podatke potrebne za izvještaj.
     * @return iterator s podacima
     */
    public CollateralIterator selectCollaterals() throws Exception
    {
        try
        {
            bc.startStopWatch("BO781.selectCollaterals");
            
            CollateralIterator iter = null;
            #sql [connCtx] iter = {
                SELECT
                    b.col_hea_id            AS col_hea_id,
                    b.col_num               AS col_num,
                    a.new_build_val         AS new_build_val,
                    b.real_est_nm_cur_id    AS real_est_nm_cur_id
                FROM coll_restate a
                INNER JOIN coll_head b ON a.col_hea_id = b.col_hea_id
                WHERE b.collateral_status = '3'
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            bc.error("Dogodila se nepredvidjena greska kod dohvata podataka za izvjestaj!", ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO781.selectCollaterals");
        }
    }

 
    /**
     * Metoda koja dohvaæa podatke o aktivnim policama osiguranja zadanog kolaterala.
     * @param col_hea_id ID kolaterala
     * @return iterator s podacima
     */
    public InsurancePolicyIterator selectInsurancePolicies(BigDecimal col_hea_id) throws Exception
    {
        try
        {
            bc.startStopWatch("BO781.selectInsurancePolicies");
            
            InsurancePolicyIterator iter = null;
            #sql [connCtx] iter = {
                SELECT
                    a.ip_id         AS ip_id,
                    a.ip_code       AS ip_code,
                    a.ip_secu_val   AS ip_secu_val,
                    a.ip_cur_id     AS ip_cur_id
                FROM insurance_policy a
                WHERE a.col_hea_id = :(col_hea_id)
                AND a.ip_act_noact = 'A'
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            bc.error("Dogodila se nepredvidjena greska kod dohvata polica osiguranja kolaterala! (COL_HEA_ID=" + col_hea_id + ")", ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO781.selectInsurancePolicies");
        }
    }
    
    
    /**
     * Metoda koja dohvaæa podatke o aktivnim plasmanima povezanim na zadani kolateral.
     * @param col_hea_id ID kolaterala
     * @return iterator s podacima
     */
    public PlacementIterator selectPlacements(BigDecimal col_hea_id) throws Exception
    {
        try
        {
            bc.startStopWatch("BO781.selectPlacements");
            
            PlacementIterator iter = null;
            #sql [connCtx] iter = {
                SELECT DISTINCT
                    b.cus_acc_id        AS cus_acc_id,
                    b.cus_acc_no        AS cus_acc_no,
                    b.exposure_balance  AS exposure_balance,
                    b.exposure_cur_id   AS exposure_cur_id,
                    b.due_date          AS due_date,
                    f.register_no       AS register_no,
                    f.name              AS name,
                    f.cus_typ_id        AS cus_typ_id,
                    u.user_name         AS referent
                FROM coll_hf_prior d
                    INNER JOIN loan_beneficiary c ON c.coll_hf_prior_id = d.coll_hf_prior_id
                    INNER JOIN cusacc_exposure b ON (b.cus_acc_id = c.la_acc_id OR b.cus_acc_no = c.acc_no OR b.request_no = c.request_no)
                    INNER JOIN customer f ON b.cus_id = f.cus_id
                    LEFT OUTER JOIN app_user u ON f.rsm_use_id = u.use_id
                WHERE d.hf_coll_head_id = :(col_hea_id)
                  AND d.hf_status = 'A'
                  AND c.status = 'A'
                  AND (b.cus_acc_status='A' OR
                         (b.cus_acc_status='C' AND (
                            (b.module_code='TRC' AND b.cus_acc_orig_st='E') OR 
                            (b.module_code='PKR' AND b.cus_acc_orig_st='T') OR 
                            (b.module_code='PPZ' AND b.cus_acc_orig_st IN ('SS', 'NM')) OR
                            (b.module_code='SDR' AND b.cus_acc_orig_st IN ('SS', 'NM')) OR  
                            (b.module_code='KRD' AND b.cus_acc_orig_st='SS') OR 
                            (b.module_code='GAR' AND b.cus_acc_orig_st='SS') OR 
                            (b.module_code='KKR' AND b.cus_acc_orig_st IN ('94','95')) OR 
                            (b.module_code='LOC' AND b.cus_acc_orig_st='SS') )
                         )
                      )
                ORDER BY 5 DESC
                WITH UR
            };
            return iter;
        }
        catch (SQLException ex)
        {
            bc.error("Dogodila se nepredvidjena greska kod dohvata plasmana kolaterala! (COL_HEA_ID=" + col_hea_id + ")", ex);
            throw ex;
        }
        finally
        {
            bc.stopStopWatch("BO781.selectPlacements");
        }
    }
}